@startuml


!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml



/' Objects '/

class VulkanMemoryManager {
	-allocator : VmaAllocator
	-commandPool : vk::CommandPool
	-graphicsQueue : vk::Queue
	-logicalDevice : vk::Device
	-physicalDevice : vk::PhysicalDevice
	__
	-copyBuffer(vk::Buffer srcBuffer, vk::Buffer dstBuffer, vk::DeviceSize size) : void
	-VulkanMemoryManager(vk::Device device, vk::PhysicalDevice physDevice, vk::CommandPool pool, vk::Queue queue)
	..Public Methods..
	+{static} Destroy() : void
	+{static} getInstance() : VulkanMemoryManager*
	+{static} Init(vk::Device device, vk::PhysicalDevice physDevice, vk::CommandPool pool, vk::Queue queue) : void
	+beginSingleTimeCommands() : vk::CommandBuffer
	+CopyDataToAllocation(void* toCopy, vk::DeviceSize copySize, VmaAllocation allocation) : void
	+createBuffer(vk::DeviceSize size, vk::BufferUsageFlags usage, VmaMemoryUsage memoryUsage) : std::tuple<vk::Buffer , VmaAllocation>
	+createBufferTypeFromVector(std::vector<T> thing, vk::BufferUsageFlags bufferType) : std::tuple<vk::Buffer , VmaAllocation>
	+DestroyBuffer(vk::Buffer buff, VmaAllocation buffAllocation) : void
	+endSingleTimeCommands(vk::CommandBuffer commandBuffer) : void
	+GetAllocationSize(VmaAllocation allocation) : vk::DeviceSize
	+GetAllocator() : VmaAllocator
	+initializeStagingBuffer(void* data, size_t dataSize) : std::tuple<vk::Buffer , VmaAllocation>
	+StageData(void* data, size_t dataSize) : std::tuple<vk::Buffer , VmaAllocation>
}





/' Inheritance relationships '/




/' Aggregation relationships '/




@enduml
