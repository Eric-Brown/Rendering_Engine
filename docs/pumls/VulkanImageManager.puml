@startuml VulkanImageManager
class VulkanImageManager{
	{static} void Init()
	- allocator: VmaAllocator
	- logicalDevice: Device
	- physicalDevice: PhysicalDevice
	- commandPool: CommandPool
	- graphicsQueue: Queue
	stbi_load, stbifree...uses createimagefromdata (maybe change ?)
	+ CreateImageFromFile(fName: string) :(Image, Allocation)
	
	+ CreateImageFromData(data, dSize, info, usage) :(Image, Allocation)
	+ void DestroyImage(Image img, VmaAllocation imgMemory)
	+ void DestroyImageView(ImageView view)
	+ void DestroySampler(Sampler sampler)
	+ ImageView CreateImageView(ImageViewCreateInfo info)
	+ Sampler CreateImageSampler(SamplerCreateInfo info)
	+ tuple<Image, VmaAllocation> createImage(VkImageCreateInfo imageInfo, VmaAllocationCreateInfo allocationCreateInfo)
	- transitionImageLayout(Image image, Format format, ImageLayout oldLayout, ImageLayout newLayout, uint32_t inMipLevels)
	- copyBufferToImage(Buffer buffer, Image image, ImageCreateInfo info)
	- generateMipmaps(Image image, ImageCreateInfo info)
	- hasStencilComponent(Format format): bool
}
note as N1
	Will need allocator accessor
	create image as VMM current
	destroy image as VMM current
	neither buffer nor image manager should control allocator lifetime
	transition image layout will be needed
	knowledge about image formats are needed
	know how to copy buffer to image
	know how to generate mipmaps
	create/destroy image view
	create/destroy image sampler
	resource manager must know how to deal with staging data
end note
note as N2
	create image:
		allocate cpu data for loading
		load cpu data to group
		free cpu data
		create vulkan image
		set image to be destination optimal for xfer
		copy from staging to destination
		release staging
		return image information
end note
@enduml