@startuml


!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml



/' Objects '/

class VulkanImageManager {
	-logicalDevice : vk::Device
	-physicalDevice : vk::PhysicalDevice
	__
	-CalculateImageSize(const vk::ImageCreateInfo& info) : vk::DeviceSize
	-CopyBufferToImage(vk::Buffer buffer, const ImageHandleInfo& info) : void
	-DetermineTransitionBarrierDestinationFlags(vk::ImageLayout to) : std::tuple<vk::AccessFlags , vk::PipelineStageFlags>
	-DetermineTransitionBarrierSourceFlags(vk::ImageLayout from) : std::tuple<vk::AccessFlags , vk::PipelineStageFlags>
	-DetermineTransitionResourceAccessFlags(vk::Format srcFormat, vk::ImageLayout to) : vk::ImageAspectFlags
	-GetImageLayoutName(vk::ImageLayout layout) : std::string
	-HasStencilComponent(vk::Format format) : bool
	-LoadImageFile(const std::string& fName) : std::tuple<void* , vk::ImageCreateInfo>
	-ThrowInvalidTransitionError(vk::ImageLayout from, vk::ImageLayout to) : void
	-ThrowSTBI_Error(const std::string& fName) : void
	-TransitionImageLayout(ImageHandleInfo imageInfo, vk::ImageLayout fromLayout, vk::ImageLayout toLayout) : void
	-VulkanImageManager(vk::Device device, vk::PhysicalDevice physDevice)
	..Public Methods..
	+{static} Destroy() : void
	+{static} getInstance() : VulkanImageManager*
	+{static} Init(vk::Device device, vk::PhysicalDevice physDevice) : void
	+CreateImageBuffer(VkImageCreateInfo info, VmaAllocationCreateInfo allocationInfo) : std::tuple<vk::Image , VmaAllocation>
	+CreateImageFromFile(std::string fName) : ImageHandleInfo
	+CreateImageSampler(vk::SamplerCreateInfo info) : vk::Sampler
	+CreateImageView(vk::ImageViewCreateInfo info) : vk::ImageView
	+DestroyImage(vk::Image img, VmaAllocation imgMemory) : void
	+DestroyImageView(vk::ImageView view) : void
	+DestroySampler(vk::Sampler sampler) : void
	+GenerateMipmaps(const ImageHandleInfo& info) : void
}



/' Inheritance relationships '/




/' Aggregation relationships '/




@enduml
