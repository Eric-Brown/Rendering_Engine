@startuml


!define DARKGREEN
!includeurl https://raw.githubusercontent.com/Drakemor/RedDress-PlantUML/master/style.puml



/' Objects '/

class Application {
	-{static} MAX_FRAMES_IN_FLIGHT : static const int
	__
	-{static} debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageType, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData) : VKAPI_ATTR vk::Bool32 VKAPI_CALL
	-{static} framebufferResizeCallback(GLFWwindow* window, int width, int height) : void
	-{static} readFile(const std::string& filename) : std::vector<char>
	-beginSingleTimeCommands() : vk::CommandBuffer
	-checkDeviceExtensionSupport(vk::PhysicalDevice device) : bool
	-chooseSwapExtent(const vk::SurfaceCapabilitiesKHR& capabilities) : vk::Extent2D
	-chooseSwapPresentMode(const std::vector<vk::PresentModeKHR>& availablePresentModes) : vk::PresentModeKHR
	-chooseSwapSurfaceFormat(const std::vector<vk::SurfaceFormatKHR>& availableFormats) : vk::SurfaceFormatKHR
	-cleanup() : void
	-cleanupImageResources() : void {query}
	-cleanupPipelineResources() : void {query}
	-cleanupSwapChain() : void
	-copyBufferToImage(vk::Buffer buffer, vk::Image image, uint32_t width, uint32_t height) : void
	-createApplicationInfo() : vk::ApplicationInfo {query}
	-createColorResources() : void
	-createCommandBuffers() : void
	-createCommandPool() : void
	-createDepthResources() : void
	-createDescriptorPool() : void
	-createDescriptorSetLayout() : void
	-createDescriptorSets() : void
	-createFramebuffers() : void
	-createGraphicsPipeline() : void
	-createGraphicsPipelineFromDescriptions(vk::VertexInputBindingDescription& bindingDescription, std::array<vk::VertexInputAttributeDescription, 3>& attributeDescriptions) : void
	-createImage(uint32_t width, uint32_t height, uint32_t imageMipLevels, vk::SampleCountFlagBits numSamples, vk::Format format, vk::ImageTiling tiling, vk::ImageUsageFlags usage, VmaMemoryUsage memUsage, vk::Image& image, VmaAllocation& imageMemory) : void
	-createImageView(vk::Image image, vk::Format format, vk::ImageAspectFlags aspectFlags, uint32_t mipLevels) : vk::ImageView
	-createImageViews() : void
	-createInstance() : void
	-createInstanceCreateInfo(vk::ApplicationInfo& appInfo) : vk::InstanceCreateInfo
	-createLogicalDevice() : void
	-createRenderPass() : void
	-createShaderModule(const std::vector<char>& code) : vk::ShaderModule
	-createSurface() : void
	-createSwapChain() : void
	-createSyncObjects() : void
	-createUniformBuffers() : void
	-currentFrame : size_t
	-destroyGlobalAllocator() : void
	-drawFrame() : void
	-endSingleTimeCommands(vk::CommandBuffer commandBuffer) : void
	-findDepthFormat() : vk::Format
	-findQueueFamilies(vk::PhysicalDevice device) : QueueFamilyIndices
	-findSupportedFormat(const std::vector<vk::Format>& candidates, vk::ImageTiling tiling, vk::FormatFeatureFlags features) : vk::Format
	-generateMipmaps(vk::Image image, vk::Format imageFormat, int32_t texWidth, int32_t texHeight, uint32_t mipLevels) : void
	-getMaxUsableSampleCount() : vk::SampleCountFlagBits
	-getRequiredExtensions() : [ [ nodiscard ] ] std::vector<const char*> {query}
	-hasStencilComponent(vk::Format format) : bool
	-initGlobalVmaAllocator() : void
	-initializeStagingBuffer(void* data, vk::DeviceSize dataSize) : std::tuple<vk::Buffer , VmaAllocation>
	-initVulkan() : void
	-initVulkanAfterPipeline() : void
	-initVulkanBeforePipeline() : void
	-initWindow() : void
	-isDeviceSuitable(vk::PhysicalDevice device) : bool
	-loadHandles() : void
	-mainLoop() : void
	-msaaSamples : vk::SampleCountFlagBits
	-pickPhysicalDevice() : void
	-populateDebugMessengerCreateInfo(vk::DebugUtilsMessengerCreateInfoEXT& createInfo) : void {query}
	-querySwapChainSupport(vk::PhysicalDevice device) : SwapChainSupportDetails
	-recreateSwapChain() : void
	-scoreDevice(vk::PhysicalDevice device) : size_t
	-setupDebugMessenger() : void
	-transitionImageLayout(vk::Image image, vk::Format format, vk::ImageLayout oldLayout, vk::ImageLayout newLayout, uint32_t mipLevels) : void
	-updateUniformBuffer(uint32_t currentImage) : void
	-validateExtensions(const std::vector<const char*>& toValidate) : void {query}
	-validateLayerSupport() : void
	..Public Methods..
	+Application()
	+run() : void
}

 

/' Inheritance relationships '/




/' Aggregation relationships '/




@enduml
